func send{{{codeSlug}}}Request() {
    /**
     {{{request.name}}}
     {{{request.method}}} {{{url.base}}}
     */

    {{! ----- Timeout ----- }}
    {{#timeout}}
    // Add timeout
    let configuration = NSURLSessionConfiguration.defaultSessionConfiguration()
    configuration.timeoutIntervalForRequest = {{{timeout}}}
    let manager = Alamofire.Manager(configuration: configuration)

    {{/timeout}}
    {{! ----- Headers ----- }}
    {{#headers.has_headers}}
    // Add Headers
    let headers = [
    {{#headers.header_list}}
        "{{{header_name}}}":"{{{header_value}}}",
    {{/headers.header_list}}
    ]

    {{/headers.has_headers}}
    {{! ----- URL Parameters ----- }}
    {{#has_params_to_encode}}
    // Add URL parameters
    let urlParams = [
    {{#url.params}}
        "{{{name}}}":"{{{value}}}",
    {{/url.params}}
    ]

    {{/has_params_to_encode}}
    {{! ----- Form URL-Encoded Body ----- }}
    {{#body.has_url_encoded_body}}
    // Form URL-Encoded Body
    let body = [
    {{#body.url_encoded_body}}
        "{{{name}}}":"{{{value}}}",
    {{/body.url_encoded_body}}
    ]

    {{/body.has_url_encoded_body}}
    {{! ----- Multipart Body ----- }}
    {{#body.has_multipart_body}}
    // Form Multipart Body
    let body = [
    {{#body.multipart_body}}
        "{{{name}}}":"{{{value}}}",
    {{/body.multipart_body}}
    ]
    {{/body.has_multipart_body}}
    {{! ----- JSON Body ----- }}
    {{#body.has_json_body}}
    // JSON Body
    {{{body.json_body_object}}}

    {{/body.has_json_body}}
    {{! ----- }}
    {{^body.has_multipart_body}}
    // Fetch Request
    {{#timeout}}manager{{/timeout}}{{^timeout}}Alamofire{{/timeout}}.request(.{{{request.method}}}{{#has_params_to_encode}}, "{{{url.base}}}"{{/has_params_to_encode}}{{^has_params_to_encode}}, "{{{url.fullpath}}}"{{/has_params_to_encode}}{{#headers.has_headers}}, headers: headers{{/headers.has_headers}}{{#body}}{{^body.has_raw_body}}, parameters: body{{/body.has_raw_body}}{{/body}}{{#body.has_raw_body}}, encoding: .Custom({(convertible, params) in
        let mutableRequest = convertible.URLRequest.copy() as! NSMutableURLRequest
        {{#body.has_short_body}}
        mutableRequest.HTTPBody = "{{body.short_body}}".dataUsingEncoding(NSUTF8StringEncoding, allowLossyConversion: false)
        {{/body.has_short_body}}
        {{^body.has_short_body}}
        mutableRequest.HTTPBody = nil; // set your body data here
        {{/body.has_short_body}}
        return (mutableRequest, nil)
    }){{/body.has_raw_body}}{{^body}}{{#has_params_to_encode}}, parameters: urlParams{{/has_params_to_encode}}{{/body}}{{#body.has_json_body}}, encoding: .JSON{{/body.has_json_body}}{{#body.has_url_encoded_body}}, encoding: .URL{{/body.has_url_encoded_body}})
    .validate(statusCode: 200..<300)
    .responseJSON{(response) in
        if (response.result.error == nil)
        {
                print("HTTP Response Body: \(response.data)")
        }
        else
        {
                print("HTTP Request failed: \(response.result.error)")
        }
    }
    {{/body.has_multipart_body}}
    {{! ----- }}
    {{#body.has_multipart_body}}
    {{! ----- }}
    {{#body.has_raw_body}}
    {{#body.has_short_body}}
    Alamofire.request(urlRequestWithRawBody("{{{url.fullpath}}}", rawBody: "{{{body.short_body}}}"))
    {{/body.has_short_body}}
    {{#body.has_long_body}}
    Alamofire.request(urlRequestWithRawBody("{{{url.fullpath}}}", rawBody: "Set your own body data"))
    {{/body.has_long_body}}
    .validate(statusCode: 200..<300)
    .responseJSON{(response) in
        if (response.result.error == nil)
        {
            print("HTTP Response Body: \(response.data)")
        }
        else
        {
            print("HTTP Request failed: \(response.result.error)")
        }
    }
    {{/body.has_raw_body}}
    {{! ----- }}
    {{#body.has_multipart_body}}

    Alamofire.request(urlRequestWithMultipartBody("{{{url.fullpath}}}", parameters: body))
    .validate(statusCode: 200..<300)
    .responseJSON{(response) in
        if (response.result.error == nil)
        {
            print("HTTP Response Body: \(response.data)")
        }
        else
        {
            print("HTTP HTTP Request failed: \(response.result.error)")
        }
    }
    {{/body.has_multipart_body}}
    {{! ----- }}
    {{/body.has_multipart_body}}
}

{{#body.has_multipart_body}}
func urlRequestWithMultipartBody(urlString:String, parameters:NSDictionary) -> (URLRequestConvertible) {

    // Create url request to send
    let mutableURLRequest = NSMutableURLRequest(URL: NSURL(string: urlString)!)
    mutableURLRequest.HTTPMethod = Alamofire.Method.POST.rawValue
    // Set Content-Type in HTTP header.
    let boundary = "PAW-boundary-\(arc4random())-\(arc4random())"
    let contentType = "multipart/form-data; boundary=" + boundary

    // Set data
    var dataString = String()
    dataString += "--\(boundary)"
    for (key, value) in parameters { dataString += "\r\nContent-Disposition: form-data; name=\"\(key)\"\r\n\r\n\(value)\r\n--\(boundary)" }
    dataString += "--"

    // Set content-type
    mutableURLRequest.setValue(contentType, forHTTPHeaderField: "Content-Type")

    // Set the HTTPBody we'd like to submit
    let requestBodyData = (dataString as NSString).dataUsingEncoding(NSUTF8StringEncoding)
    mutableURLRequest.HTTPBody = requestBodyData

    // return URLRequestConvertible
    return (Alamofire.ParameterEncoding.URL.encode(mutableURLRequest, parameters: nil).0)
}
{{/body.has_multipart_body}}
